const googleApis = require('googleapis')
const axios = require('axios')
const env = require('dotenv').config()
const fs = require('fs')

const email = "";
const clientId = "";
const clientSecret = "";
const redirectUri = "";//Where google would redirect back to after authenticating you

const generateOauth = (clientId,clientSecret,redirectUri)=>{
    return new googleApis.google.auth.OAuth2(clientId,clientSecret,redirectUri)
}

/**
 * 
 * @param {googleApis.Common.OAuth2Client} authclient the client generated by calling `generateOauth`
 */
const initiateDrive = (authclient)=>{
    return googleApis.google.drive({
        version:"v2",
        auth:authclient
    })
}

/**
 * 
 * @param {googleApis.Common.OAuth2Client} authclient the client generated by calling `generateOauth`
 */
const generateGoogleAuthUrl = (authclient)=>{
    return authclient.generateAuthUrl({
        scope:["https://www.googleapis.com/auth/drive"],
        access_type:"offline",
        include_granted_scopes:true
    })
}

/**
 * @param {googleApis.drive_v2.Drive} driveInstance instance of GDrive generated by calling `initiateDrive`
 * @param {string} id 
 */
const getFileData = async (driveInstance,id) =>{
    let fileData = await driveInstance.files.get({fileId:id})
    return fileData
}

/**
 * @param {googleApis.drive_v2.Drive} driveInstance instance of GDrive generated by calling `initiateDrive`
 * @param {number} amount
 */
const getFiles = async (driveInstance,amount,key) =>{
    const response = await driveInstance.files.list({
        pageSize: 10, // Set the desired number of files to retrieve
        fields: 'files(name, id)', // Specify the fields to include in the response
      },{key:key})
      const files = response.data.files
      return files
}

/**
 * @param {googleApis.drive_v2.Drive} driveInstance instance of GDrive generated by calling `initiateDrive`
 * @param {string} fileId 
 */
const downloadFile = async (driveInstance,fileId) =>{
    let destination = fs.createWriteStream('../upload')
    return new Promise((resolve,reject)=>{
        driveInstance.files.get({fileId,alt:"media"},{responseType:'stream'},(err,res)=>{
            res.data.on('end',()=>{
                console.log("done")
                resolve(res)
            }).on('error',(err)=>{
                console.log(err)
                reject(err)
            }).pipe(destination)
        })
    })
}

/**
 * @param {googleApis.drive_v2.Drive} driveInstance instance of GDrive generated by calling `initiateDrive`
 * @param {string} fileId 
 */
const downloadStreamFile = async (driveInstance,fileId,access_token,res) =>{
    var dest = fs.createWriteStream("../uploads/file.mp4");
    let data = await driveInstance.files.get({fileId:fileId, alt: "media",access_token:access_token},{responseType: "stream"})
    data.data.on("end", () => console.log("Done."))
    .on("error", (err) => {
        console.log(err);
        return process.exit();
    }).pipe(dest);
}


/**
 * 
 * @param {undefined | {}} authData 
 * @param {string} fileId 
 * @param {string} DestinationName 
 * @returns {Promise<string>}
 */
const downloadGdriveVideo = async (authData,fileId,DestinationName) =>{
    DestinationName = DestinationName ? DestinationName : "file"
    let destination = fs.createWriteStream(`./uploads/${DestinationName}.mp4`)
    const refresh_data = await axios.post("https://oauth2.googleapis.com/token",{
        client_id:authData.client_id,
        client_secret:authData.client_secret,
        grant_type:"refresh_token",
        refresh_token:authData.refresh_token
    })
    
    const data = await axios.get(`https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,{
    headers:{
        "Authorization" : "Bearer " + refresh_data.data.access_token
    },responseType:"stream"
    }) 
    data.data.pipe(destination)
    return destination
}



/**
 * gets the source of the 
 */
const getSource = async (url,id) =>{
    const res = await axios({
        method: 'get',
        url: ''
    })
}

module.exports = {
    getSource,downloadFile,getFileData,generateGoogleAuthUrl,downloadStreamFile,initiateDrive,generateOauth,getFiles,downloadGdriveVideo
}

