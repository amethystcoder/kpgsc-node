<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="<%=favicon%>" type="image/x-icon">
    <!-- <script disable-devtool-auto src='https://cdn.jsdelivr.net/npm/disable-devtool'></script> -->
    <title><%=title%></title>
    <link rel="stylesheet" href="../static/ads.css">
    <script src="../static/adplayer.js"></script>
    <link href="http://vjs.zencdn.net/7.15.4/video-js.css" rel="stylesheet" />
    <script src="http://vjs.zencdn.net/7.15.4/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/p2p-media-loader-core@latest/build/p2p-media-loader-core.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/p2p-media-loader-hlsjs@latest/build/p2p-media-loader-hlsjs.min.js"></script>
    <script src="../static/activeVideoConnection.js"></script>
    <script src="../static/clientvid.js"></script>


     <!-- Import map for P2P Media Loader modules -->
     <script type="importmap">
        {
          "imports": {
            "p2p-media-loader-core": "https://cdn.jsdelivr.net/npm/p2p-media-loader-core@^1/dist/p2p-media-loader-core.es.min.js",
            "p2p-media-loader-hlsjs": "https://cdn.jsdelivr.net/npm/p2p-media-loader-hlsjs@^1/dist/p2p-media-loader-hlsjs.es.min.js"
          }
        }
      </script>

      <!-- Module script to initialize Vidstack player with P2P Media Loader -->
    <script type="module">
        import { HlsJsP2PEngine } from "p2p-media-loader-hlsjs";

        let isHls = '<%=isHls%>';
        let options = {
            autoplay: true,
            controls:true,
            sources : [{
                src:'<%=videoLink%>',
                type:"<%=videoMime%>"
            }]
        }

        

        window.addEventListener("DOMContentLoaded",async ()=>{
            let player = videojs("video",options)
            //fetch instead...
            let response = await fetch("../api/ads/request")
            let data = await response.json()
            let adplayer = new AdLoader('video_html5_api',data.vastAds,data.popUpAds)
        })
        
        if (isHls == "true") {
          const player = document.querySelector(".gd-video");
          // Inject P2P capabilities into Hls.js
          const HlsWithP2P = HlsJsP2PEngine.injectMixin(window.Hls);

          console.log(HlsWithP2P)
    
          const hls = new HlsWithP2P({
            p2p: {
              core: {
                swarmId: "Optional custom swarm ID for stream",
                // Other P2P engine config parameters go here
              },
              onHlsJsCreated(hls) {
                hls.p2pEngine.addEventListener("onPeerConnect", (params) => {
                  console.log("Peer connected:", params.peerId);
                });
                // Subscribe to P2P engine and Hls.js events here
              },
            },
          });

          hls.attachMedia(player);
          hls.loadSource('<%=videoLink%>');
        }
      </script>



    <script>
        
    </script>
</head>
<body>
    <%- include('../sections/videolink')%>
    <video id="video" class="video-js vjs-default-skin gd-video" controls playsinline>
        <source src="<%=videoLink%>" type="<%=videoMime%>">
    </video>
</body>
</html>